@using RazorEngine
@using WebApiClientTS
@inherits RazorEngine.Templating.TemplateBase<ApiControllerMetadata>
@helper ParameterListing(IList<ParameterMetadata> parameters)
{
    @Raw(string.Join(", ", parameters.Select(p => p.Name + ": " + p.Type)));
}
import { Injectable } from '@@angular/core';
import { Http, Response } from '@@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import { Jsonp, URLSearchParams, RequestOptionsArgs } from '@@angular/http';
@Raw(Model.CompileModels())
@@Injectable()
export class @(Model.Name)ApiService {

    constructor(private http: Http) { }
@foreach (MethodMetadata method in Model.Methods)
{
<text>
    @(method.Name)(@ParameterListing(method.Parameters)): Observable@(Raw("<"))@Raw(method.ReturnType)@(Raw(">")) {
        if(!config) { config = {}; }
        config.method = '@(method.HttpMethod)';
        config.body = @method.RequestData;
        config.params = {@Raw(string.Join(",", method.Parameters.Where(a => a.IsQueryParam).Select(p => "\r\n            " + p.Name + (p.IsNullable ? (": " + p.Name + " == null ? '' : " + p.Name) : ""))))
        };
        return this.http.request('~/@method.RelativePath', config)
            .map(this.extractData)
            .catch(this.handleError);
    }</text>
}

    private extractData(res: Response) {
        let body = res.json();
        return body || { };
    }

    private handleError(error: Response | any) {
        // In a real world app, you might use a remote logging infrastructure
        let errMsg: string;
        if (error instanceof Response) {
        const body = error.json() || '';
        const err = body.error || JSON.stringify(body);
        errMsg = `${ error.status}
        - ${ error.statusText || ''} ${ err}`;
        } else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return Observable.throw (errMsg);
    }
}
