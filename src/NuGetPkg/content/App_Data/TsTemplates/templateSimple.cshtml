@using RazorEngine
@using WebApiClientTS
@inherits RazorEngine.Templating.TemplateBase<ApiControllerMetadata>
@helper ParameterListing(IList<ParameterMetadata> parameters)
{
    @Raw(string.Join(", ", parameters.Select(p => p.Name + ": " + p.Type)));
}
import angular from 'angular';
import * as helper from './helper.api';
@Raw(Model.CompileModels())
/* tslint:disable:max-line-length triple-equals */
export class @(Model.Name)ApiService {

    static $name = '@(Model.Name.ToLowerCaseFirstLetter())ApiService';

    static $inject = ['$http'];

    constructor(
        private $http: ng.IHttpService
    ) { }
@foreach (MethodMetadata method in Model.Methods)
{
<text>
    @(method.Name)(@ParameterListing(method.Parameters)): ng.IPromise@(Raw("<"))@Raw(method.ReturnType)@(Raw(">")) {
        config = angular.extend({
            url: '~/@method.RelativePath',
            method: '@method.HttpMethod',
            data: @method.RequestData,
            params: {@Raw(string.Join(",", method.Parameters.Where(a => a.IsQueryParam)
               .Select(p => "\r\n                " + p.Name + (p.IsNullable ? (": " + p.Name + " == null ? '' : " + p.Name) : ""))))
            }@if (!string.IsNullOrEmpty(method.Cache))
            {
<text>,
            cache: @method.Cache</text>}

        }, config || {});
        return this.$http<@Raw(method.ReturnType)>(@(Raw("<"))ng.IRequestConfig@(Raw(">"))config).then(helper.getResponseData);
    }
</text>
}
}
/* tslint:enable:max-line-length triple-equals */
export let NG_NAME_SERVICE_@(Model.Name.ToConstantName())_API = '@(Model.Name.ToLowerCaseFirstLetter())ApiService';
// Favor usar @(Model.Name)ApiService.$name ao inves de NG_NAME_SERVICE_@(Model.Name.ToConstantName())_API
export let @(Model.Name.ToLowerCaseFirstLetter())ApiServiceModule = angular.module('app.clientApi.@(Model.Name)ApiService', [])
    .service(@(Model.Name)ApiService.$name, @(Model.Name)ApiService);
    export default @(Model.Name.ToLowerCaseFirstLetter())ApiServiceModule;
