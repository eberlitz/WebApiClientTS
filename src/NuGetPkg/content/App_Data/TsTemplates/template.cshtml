@using RazorEngine
@using WebApiClientTS
@inherits RazorEngine.Templating.TemplateBase<ApiControllerMetadata>
@helper ParameterListing(IList<ParameterMetadata> parameters)
{
    @Raw(string.Join(", ", parameters.Select(p => p.Name + ": " + p.Type)));
}
import 'angular';
@Raw(Model.CompileModels())
export interface I@(Model.Name)ApiService {
@foreach (MethodMetadata method in Model.Methods)
{
<text>
    @(method.Name)(@ParameterListing(method.Parameters)): ng.IPromise@(Raw("<"))@(Raw(method.ReturnType))@(Raw(">"));</text>
}
}

export class @(Model.Name)ApiService implements I@(Model.Name)ApiService {

    public static $inject = ['$http'];

    constructor(
        private $http: ng.IHttpService
    ) { }
@foreach (MethodMetadata method in Model.Methods)
{
<text>
    @(method.Name)(@ParameterListing(method.Parameters)): ng.IPromise@(Raw("<"))@(Raw(method.ReturnType))@(Raw(">")) {
        config = angular.extend({
            url: '~/@method.RelativePath',
            method: '@method.HttpMethod',
            data: @(Raw(method.RequestData)),
            params: {@Raw(string.Join(",", method.Parameters.Where(a => a.IsQueryParam)
               .Select(p => "\r\n                " + p.Name + (p.IsNullable ? (": " + p.Name + " == null ? '' : " + p.Name) : ""))))
            }@if (!string.IsNullOrEmpty(method.Cache))
            {
<text>,
            cache: @method.Cache</text>}

        }, config || {});
        return this.$http<@(Raw(method.ReturnType))>(config);
    }</text>
}
}

export let NG_NAME_SERVICE_@(Model.Name.ToConstantName())_API = '@(Model.Name.ToLowerCaseFirstLetter())ApiService';
export let @(Model.Name.ToLowerCaseFirstLetter())ApiServiceModule = angular.module('app.clientApi.@(Model.Name)ApiService', [])
    .service(NG_NAME_SERVICE_@(Model.Name.ToConstantName())_API, @(Model.Name)ApiService);
    export default @(Model.Name.ToLowerCaseFirstLetter())ApiServiceModule;
